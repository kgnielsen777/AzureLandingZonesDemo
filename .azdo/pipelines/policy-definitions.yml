---
trigger:
  paths:
    include:
      - .azdo/pipelines/policy-definitions.yml
      - modules/policies/policy-definitions/**
    exclude:
      - README.md

variables:
  vmImage: ubuntu-latest

stages:
  - stage: build
    displayName: Build & Test
    jobs:
      - job: build
        displayName: Build & Test
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: $(vmImage)
        steps:
          - task: AzureCLI@2
            displayName: Build Template
            inputs:
              azureSubscription: ${{ variables.azureConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                ./modules/policies/scripts/Build-PolicyTemplate.ps1 -Path modules/policies/policy-definitions | Out-File -FilePath modules/policies/policy-definitions/main.bicep
                az bicep build --file modules/policies/policy-definitions/main.bicep --outfile $(Build.ArtifactStagingDirectory)/main.json
                az bicep build-params --file modules/policies/scripts/empty.bicepparam --outfile $(Build.ArtifactStagingDirectory)/main.canary.parameters.json
                az bicep build-params --file modules/policies/scripts/empty.bicepparam --outfile $(Build.ArtifactStagingDirectory)/main.prod.parameters.json

          - task: PowerShell@2
            displayName: Run Pester Tests
            inputs:
              targetType: inline
              script: |
                Invoke-Pester -CI
              pwsh: true

          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: "**/testResults.xml"
              failTaskOnFailedTests: true
              failTaskOnMissingResultsFile: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: drop
              publishLocation: pipeline

  - stage: validate
    displayName: Validate
    dependsOn: build
    jobs:
      - deployment: canary
        displayName: Canary
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: $(vmImage)
        environment: Canary
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: canary
                    command: validate
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}

                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: canary
                    command: what-if
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}

      - deployment: prod
        displayName: Production
        variables:
          - template: ../../environments/prod/vars.yml
        pool:
          vmImage: $(vmImage)
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: prod
                    command: validate
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}

                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: prod
                    command: what-if
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}


  - stage: deploy
    displayName: Deploy
    dependsOn: validate
    jobs:
      - deployment: canary
        displayName: Canary
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: $(vmImage)
        environment: Canary
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: canary
                    command: create
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}

      - deployment: prod
        displayName: Production
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        variables:
          - template: ../../environments/prod/vars.yml
        pool:
          vmImage: $(vmImage)
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/management-group-deployment.yml
                  parameters:
                    deploymentName: policy-definitions
                    environment: prod
                    command: create
                    azureConnection: ${{ variables.azureConnection }}
                    location: ${{ variables.location }}
                    managementGroupId: ${{ variables.managementGroupId }}
